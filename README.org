#+TITLE:DCC: D's Cruft Collection

This is where I dump opinionated snippets from my Emacs configuration
and related hacks, together with some of the thinking processes behind
them.

** Elisp Conventions
I generally prefix all of my functions and variables with the prefix
~my-~.  That's about it.

* Greek Character Input with =C-x 8 g=
I must say, one of the things I have come to truly appreciate is the
concept of a compose key.  You have a rare character you wanna type,
you smash two vaguely related characters together, and the result is
what you wanted.  Take ç (also known as =LATIN SMALL LETTER C CEDILLA=)
for example.  =Compose + , + c= = =ç=.  Brilliant.  Emacs has something
similar, the =C-x 8= prefix.  It either takes multiple characters and
mashes them together, like =C-x 8 " A= = =Ä=, or takes a single character
as if to say "give me that one but weird" (see =C-x 8 P= = =¶=).  Another
thing both features have in common is that they both have a lot of
untapped potential.  All that room for cryptic mnemonics that possibly
make only sense to you!

So, how does =C-x 8= work?  It does not have a map like =C-x 4='s
~ctl-x-4-map~, and its entries are listed as "Key translations", not
"Global Bindings".  Well, it's in a special map, ~key-translation-map~.
Adding bindings to this map which are just single-char keyboard macros
also has the advantage of them showing up /as the actual characters/ in
help menus such as that of ~describe-bindings~, instead of just
unhelpfully reading =Keyboard Macro=.  Now to the actual code: I decided
to use the prefix =C-x 8 g= + whatever +letter makes sense in my head+
AUCTeX picked.  To be fair, I find most of the AUCTeX bindings
intuitive, which is why I decided to go for them after doing some
=.emacs= housekeeping.
#+begin_src elisp
  (defvar my-greek-prefix "C-x 8 g"
    "Keyboard prefix used for greek letters, as a string.")

  (defvar my-greek-alist nil
    "Alist of keys to be translated into greek characters.
  Each entry should take the form
  \(KEY . VALUE)

  where KEY is a string and VALUE a char.

  KEY should correspond to a string of keys which (prefixed by
  ‘my-greek-prefix’) translates into the corresponding VALUE.")

  (setq-default my-greek-alist ;; Rip off AUCTeX.
                '(("a" . ?α)
                  ("b" . ?β)
                  ("c" . ?χ) ;; This one is now free!
                  ("d" . ?δ)
                  ("D" . ?Δ)
                  ("e" . ?ε)
                  ("f" . ?ϕ)
                  ("v f" . ?φ)
                  ("F" . ?Φ)
                  ("g" . ?γ)
                  ("G" . ?Γ)
                  ("h" . ?η)
                  ("i" . ?ι) ;; Makes the most sense here.
                  ("j" . ?θ)
                  ("J" . ?Θ)
                  ("k" . ?κ)
                  ("l" . ?λ)
                  ("L" . ?Λ)
                  ("m" . ?μ)
                  ("n" . ?ν)
                  ("p" . ?π)
                  ("P" . ?Π)
                  ("q" . ?χ)
                  ("r" . ?ρ)
                  ("s" . ?σ)
                  ("S" . ?Σ)
                  ("t" . ?τ)
                  ("u" . ?υ)
                  ("y" . ?ψ)
                  ("Y" . ?Ψ)
                  ("x" . ?ξ)
                  ("X" . ?Ξ)
                  ("w" . ?ω)
                  ("W" . ?Ω)
                  ("z" . ?ζ)))

  (dolist (entry my-greek-alist)
    (define-key key-translation-map
      (kbd (format "%s %s" my-greek-prefix (car entry)))
      (char-to-string (cdr entry))))
#+end_src

#  LocalWords:  Elisp ç AUCTeX
